#!/usr/bin/env bash
# shellcheck shell=bash
set -euo pipefail

## Silently fall back to "plain" SSH, if:
## - Hashcolor is not found;
## - `ssh` is a part of a pipe command;
## - There are I/O redirections in place.
if ! type hashcolor &>/dev/null || ! [[ -t 0 && -t 1 && -t 2 ]]; then
   exec ssh "${@}"
fi

## Set your fallback FG/BG colors here:
DEFAULT_BG="000000"
DEFAULT_FG="EAEAEA"
## Set this to `false` if autodetection doesn't work for you:
DEF_COLORS_AUTO=true
SSH_OPTIONS=(
    -o "PermitLocalCommand=true"
    -o "LocalCommand=hashcolor %C"
)

## Set FG/BG colors in terminal:
set_colors() {
    local _fg="${1}" _bg="${2}"
    if [[ "${TERM_PROGRAM}" == 'iTerm.app' ]]; then
        if [[ "${#_fg}" -ge 10 ]]; then
            _fg="$(sed -E 's#[0-9a-f]{2}(/|$)##g' <<< "${_fg}")"
            _bg="$(sed -E 's#[0-9a-f]{2}(/|$)##g' <<< "${_bg}")"
        fi
        printf "\e]1337;SetColors=fg=%s\a\e]1337;SetColors=bg=%s\a" "${_fg:-rgb:${DEFAULT_FG}}" "${_bg:-rgb:${DEFAULT_BG}}"
    else
        printf "\e]10;%s\a\e]11;%s\a" "${_fg:-rgb:#${DEFAULT_FG}}" "${_bg:-rgb:#${DEFAULT_BG}}"
    fi
}

## Query current FG/BG colors using OSC:
query_colors() {
    oldstty="$(stty -g)"
    stty raw -echo min 0
	  printf "\e]10;?\a\e]11;?\a"
    read -d $'\a' -s -r -t 1 fg
    read -d $'\a' -s -r -t 1 bg
    stty "${oldstty}"
    def_fg="${fg##*;}"
    def_bg="${bg##*;}"
}

## Check if we're being called from within the shell:
PARENT_COMMAND="$(ps -o comm= $PPID)"
if [[ "${PARENT_COMMAND}" =~ sh ]]; then
    def_fg=''
    def_bg=''
    ## Determine current colors (if enabled):
    [[ "${DEF_COLORS_AUTO}" == true ]] && query_colors

    # shellcheck disable=SC2029
    ssh "${SSH_OPTIONS[@]}" "${@}"
    ## Capture SSH exit code here, to use it as our own later:
    SSH_EC="$?"
    ## Reset terminal colors to defaults:
    set_colors "${def_fg}" "${def_bg}"
    exit "${SSH_EC}"
else
    exec ssh "${SSH_OPTIONS[@]}" "${@}"
fi
